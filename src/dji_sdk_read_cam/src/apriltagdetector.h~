#ifndef APRILTAGDETECTOR_H
#define APRILTAGDETECTOR_H

// AprilTag family
#include "AprilTags/TagDetector.h"
#include "AprilTags/Tag16h5.h"
#include "AprilTags/Tag25h7.h"
#include "AprilTags/Tag25h9.h"
#include "AprilTags/Tag36h9.h"
#include "AprilTags/Tag36h11.h"

#define USING_OPENCV
#define USING_ROS

#include <dji_sdk/Reldist.h>
#include<std_msgs/Int8.h>
#ifdef USING_ROS
#include "ros/ros.h"
#include <ros/publisher.h>
#endif

#ifndef PI
const double PI = 3.14159265358979323846;
#endif

const double TWOPI = 2.0*PI;

class ApriltagDetector
{
public:
    AprilTags::TagDetector* m_tagDetector;
    AprilTags::TagCodes m_tagCodes;

    int m_mode; // 0: AprilTag detection directly
                // 1: with ROI window
                // 2: with Optical flow tracking

    bool m_draw; // draw image and April tag detections?
    bool m_timing; // print timing information for each tag extraction call
    bool m_isShowResult;

    int m_width; // image size in pixels
    int m_height;
    double m_tagSize; // April tag side length in meters of square black frame
    double m_fx; // camera focal length in pixels
    double m_fy;
    double m_px; // camera principal point
    double m_py;

    int m_frames;
    vector<int> m_win; // [ x_min, x_max, y_min, y_max ]
    bool m_isTracking;
    

#ifdef USING_OPENCV
    cv::VideoCapture m_cap;
#endif

#ifdef USING_ROS
    ros::Publisher* m_result_pub;
    ros::Publisher * m_numOfDetection_pub;
    dji_sdk::Reldist rel_dist;
    std_msgs::Int8 m_numOfDetections;
#endif

    std::vector<cv::Point2f> points[2];
    vector<AprilTags::TagDetection> detections;

public:
    ApriltagDetector():
        m_tagDetector(NULL),
        m_tagCodes(AprilTags::tagCodes36h11),

        m_mode(1),

        m_draw(true),
        m_timing(true),
        m_isShowResult(true),

        m_width(640),
        m_height(480),
        m_tagSize(0.31),
        m_fx(373),//Specified by x3 Camera;
        m_fy(373),
        m_px(318),
        m_py(181),
        m_frames(0),
        m_isTracking(false)
    {
        m_tagDetector = new AprilTags::TagDetector(m_tagCodes);
    }

    ~ApriltagDetector() {}

    void setPulisher(ros::Publisher* res_pub_,ros::Publisher * num_of_detetection_pub_)
    {
      m_result_pub = res_pub_;
      m_numOfDetection_pub = num_of_detetection_pub_;
    }

    // changing the tag family
    void setTagCodes(string s);

    // changing the tag size
    void setTagSize(double size_)
    {m_tagSize = size_;}

    // reboot for new video stream
    void reboot();

    // get window with (1+2*delta)*TagSize
    std::vector<int> point2win(cv::Mat image, float delta = 0);

    void print_detection(AprilTags::TagDetection& detection) const ;

    void processImage(cv::Mat &image);
#ifdef USING_ROS
    void publishTag();
#endif
};

#endif // APRILTAGDETECTOR_H
