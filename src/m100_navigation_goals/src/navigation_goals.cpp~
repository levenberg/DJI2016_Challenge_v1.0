#include <ros/ros.h>
#include <stdlib.h>
#include <sensor_msgs/LaserScan.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

 
int main(int argc, char** argv){
  ros::init(argc, argv, "navigation_goals");

  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "base_link";
  goal.target_pose.header.stamp = ros::Time::now();

  ros::NodeHandle n;

  //Test filtering

  sleep(5);
  
 

  while (n.ok()) {
      srand(time(NULL));
      int x = rand() % 8;
      switch (x) {
	  case 0:
	      goal.target_pose.pose.position.x = 10.0;
	      goal.target_pose.pose.position.y = 0;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	  case 1:
	      goal.target_pose.pose.position.x = 0;
	      goal.target_pose.pose.position.y = 10.0;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	  case 2:
	      goal.target_pose.pose.position.x = -10;
	      goal.target_pose.pose.position.y = 0;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	  case 3:
	      goal.target_pose.pose.position.x = 0;
	      goal.target_pose.pose.position.y = -10.0;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	  case 4:
	      goal.target_pose.pose.position.x = 7;
	      goal.target_pose.pose.position.y = 7;
	      
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	  case 5:
	      goal.target_pose.pose.position.x = -7;
	      goal.target_pose.pose.position.y = 7;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	      case 6:
	      goal.target_pose.pose.position.x = 7;
	      goal.target_pose.pose.position.y = -7;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
	  case 7:
	      goal.target_pose.pose.position.x = -7;
	      goal.target_pose.pose.position.y = -7;
	      goal.target_pose.pose.orientation.w = 1.0;
	      break;
      }
      
      ROS_INFO("Sending goal");
      sleep(45);
      ac.sendGoal(goal);

      // ac.waitForResult();

      if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
          ROS_INFO("Hooray, the base moved 1 meter forward");
      else
          ROS_INFO("The base failed to move forward 1 meter for some reason");
  }

  return 0;
}
